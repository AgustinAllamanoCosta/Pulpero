name: Create Core Release

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to release (e.g., v1.0.0)'
        required: true
        type: string
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set version variable
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version_tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      - name: Check version existence
        id: version_check
        run: |
          VERSION_WITHOUT_V="${VERSION#v}"
          if jq -e --arg version "$VERSION_WITHOUT_V" '.versions[] | select(.version == $version)' releases/versions.json > /dev/null; then
            echo "Version $VERSION_WITHOUT_V already exists in versions.json"
            echo "::set-output name=exists::true"
            exit 1
          else
            echo "Version $VERSION_WITHOUT_V is new"
            echo "::set-output name=exists::false"
          fi

      - name: Create Core Bundle
        run: |
          cd lua/pulpero/core
          tar -czf core-bundle-${VERSION#v}.tar.gz ./*
          mv "core-bundle-${VERSION#v}.tar.gz" ../../..

      - name: Update Versions Manifest
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          FILENAME="core-bundle-${VERSION#v}.tar.gz"
          CHECKSUM=$(sha256sum "$FILENAME" | cut -d' ' -f1)
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          JSON_STRING=$( jq -n \
          --arg cs "$CHECKSUM" \
          --arg vs "$VERSION" \
          --arg fn "$FILENAME" \
          --arg dt "$DATE" \
          --arg url "https://github.com/AgustinAllamanoCosta/pulpero/releases/download/$VERSION/$FILENAME" \
          '{
            version: $vs,
            url: $url,
            checksum: $cs,
            releaseDate: $dt,
            minEditorVersion: "5.0.0",
            breaking: false
          }')
          jq --argjson new "$JSON_STRING" '.versions += [$new]' releases/version.json > temp.json && mv temp.json releases/version.json
          jq ".latest = \"${VERSION#v}\"" releases/version.json > temp.json && mv temp.json releases/version.json

      - name: Create Visual Studio Code adapter package
        run: |
          cd adapters/vscode
          npm ci
          npm run package

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Commit version update
        run: |
          git status
          git add releases/version.json
          git commit -m "Update versions.json for release ${VERSION}"
          git push origin HEAD:main

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.PAT_TOKEN }}
          tag_name: ${{ env.VERSION }}
          files: |
            core-bundle-*.tar.gz
            adapters/vscode/pulpero-vscode-*.vsix
            releases/version.json
